/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 scene.gltf --transform 
Files: scene.gltf [54.63KB] > /Users/aschwad/Documents/Code/pose-detection/Dayo Miniroyale Rigged/scene-transformed.glb [511.14KB] (-836%)
Author: zct_33 (https://sketchfab.com/zct_33)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/dayo-miniroyaleio-rigged-f46755a3a4764f9bb1c20d3e07f01de0
Title: Dayo  - miniroyale.io - (Rigged)
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { Keypoint } from '@tensorflow-models/pose-detection'
import { Matrix4, Vector3 } from 'three'

interface ModelWomanProps {
  poseKeypoints: Keypoint[]
}


const mapping = {
  "nose": "Head_3",
  "left_shoulder": "LeftShoulder_28",
  "right_shoulder": "RightShoulder_52",
  // "left_elbow": "LeftArm_27",
  // "right_elbow": "RightArm_51",
  // "left_wrist": "LeftForeArm_26",
  // "right_wrist": "RightForeArm_50",
  // "left_hip": "LeftUpLeg_60",
  // "right_hip": "RightUpLeg_65",
  // "left_knee": "LeftLeg_59",
  // "right_knee": "RightLeg_64",
  "left_ankle": "LeftFoot_58",
  "right_ankle": "RightFoot_63",
}

export function ModelWoman({ poseKeypoints }: ModelWomanProps) {
  const { scene } = useGLTF('/untitled-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  useEffect(() => {
    // (keypoint.x - 330) / 100, - (keypoint.y - 380) / 100, 0)
    if(poseKeypoints.length < 1) return
    console.log(poseKeypoints.find((keypoint) => keypoint.name === "left_hip"))
    console.log(poseKeypoints.find((keypoint) => keypoint.name === "left_ankle"))

    
    const centerX = (poseKeypoints.find((keypoint) => keypoint.name === "left_hip")?.x! + poseKeypoints.find((keypoint) => keypoint.name === "right_hip")?.x! - 650) / 2 / 100
    const centerY = (poseKeypoints.find((keypoint) => keypoint.name === "left_hip")?.y! + poseKeypoints.find((keypoint) => keypoint.name === "right_hip")?.y! - 510) / 2 / 100
    nodes.GLTF_created_0_rootJoint.position.setX(centerX)
    nodes.GLTF_created_0_rootJoint.position.setY(centerY)
        
    /**
     * Positions a target joint based on a keypoint in relation to a reference joint.
     * @param {Object} keypoint - The keypoint to position the target joint.
     * @param {THREE.Object3D} referenceJoint - The joint used as the reference for local coordinates.
     * @param {THREE.Object3D} targetJoint - The joint to be positioned based on the keypoint.
     */
    function positionJointBasedOnKeypoint(keypoint: Keypoint, referenceJoint: any, targetJoint: any) {
      if (!referenceJoint || !targetJoint) {
          console.error('Reference joint or target joint not found');
          return;
      }

      // Convert keypoint to global coordinate (adjust according to your coordinate system)
      const inputCoordinate = new Vector3(
          (keypoint.x - 330) / 100,
          - (keypoint.y - 380) / 100,
          0
      );

      // 1. Get the world matrix of the reference joint
      const referenceWorldMatrix = new Matrix4();
      referenceJoint.updateWorldMatrix(true, false);
      referenceWorldMatrix.copy(referenceJoint.matrixWorld);

      // 2. Calculate the inverse of the reference joint's world matrix
      const inverseReferenceWorldMatrix = referenceWorldMatrix.clone().invert();

      // 3. Convert the input coordinate to local space relative to the reference joint
      const inputLocalPosition = inputCoordinate.clone().applyMatrix4(inverseReferenceWorldMatrix);

      // 4. Set the position of the target joint in its local space
      targetJoint.position.copy(inputLocalPosition);
    }

    // Example usage
    const leftWristKeypoint = poseKeypoints.find(keypoint => keypoint.name === "left_wrist");
    const leftElbowKeypoint = poseKeypoints.find(keypoint => keypoint.name === "left_elbow");
    const leftElbowJoint = nodes.LeftForeArm_26; // Reference joint
    const leftHandJoint = nodes.LeftHand_25; // Target joint
    const leftArm = nodes.LeftArm_27; // Target joint

    leftArm.rotateZ(30)
    if (leftWristKeypoint && leftElbowKeypoint) {
      positionJointBasedOnKeypoint(leftElbowKeypoint, leftArm, leftElbowJoint);
      positionJointBasedOnKeypoint(leftWristKeypoint, leftElbowJoint, leftHandJoint);
    } else {
      console.error('Left wrist keypoint not found');
    }

  }, [poseKeypoints])

  return (
    <group dispose={null} scale={2.3}>
      <primitive object={nodes.GLTF_created_0_rootJoint} />
      <skinnedMesh geometry={nodes.Object_7.geometry} material={materials.SkinTexture} skeleton={nodes.Object_7.skeleton} />
      <skinnedMesh geometry={nodes.Object_9.geometry} material={materials.Rnd_HAR} skeleton={nodes.Object_9.skeleton} />
      <skinnedMesh geometry={nodes.Object_11.geometry} material={materials.Rnd_EYE} skeleton={nodes.Object_11.skeleton} />
      <skinnedMesh geometry={nodes.Object_13.geometry} material={materials.Rnd_HDS} skeleton={nodes.Object_13.skeleton} />
      <skinnedMesh geometry={nodes.Object_15.geometry} material={materials.Rnd_HDS} skeleton={nodes.Object_15.skeleton} />
      <skinnedMesh geometry={nodes.Object_17.geometry} material={materials.Rnd_HDS} skeleton={nodes.Object_17.skeleton} />
      <skinnedMesh geometry={nodes.Object_19.geometry} material={materials.Rnd_HDS} skeleton={nodes.Object_19.skeleton} />
    </group>
  )
}

useGLTF.preload('/untitled-transformed.glb')
